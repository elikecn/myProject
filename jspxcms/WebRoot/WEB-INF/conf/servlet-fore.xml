<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	default-lazy-init="true">
	
	<!--（SpringMVC的servlet配置文件,前台）：声明Controller的控制器，指定SpringMVC的视图解析器   -->
	
	<!-- <context:annotation-config/>的作用是隐式地向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor
    PersistenceAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。 -->
	<context:annotation-config/>
	
	
	<!-- Spring3.1使用新的HandlerMapping 和 HandlerAdapter来支持@Contoller和@RequestMapping注解处理器。
	新的@Contoller和@RequestMapping注解支持类：处理器映射RequestMappingHandlerMapping 和 处理器适配器RequestMappingHandlerAdapter组合来 
	代替Spring2.5开始的处理器映射DefaultAnnotationHandlerMapping和处理器适配器AnnotationMethodHandlerAdapter -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="com.jspxcms.common.web.BindingInitializer"/>
		</property>
	</bean>
  
  
  <!-- 使用Spring CommonsMultipartResolver 上传文件 -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  </bean>
 	
 	
 	
 	<!-- Spring 3引入一个 mvc XML的命名空间用于支持mvc配置  -->
 	<!-- <mvc:annotation-driven>：
 		自动注册基于注解风格的处理器需要的DefaultAnnotationHandlerMapping、AnnotationMethodHandlerAdapter
      	支持Spring3的ConversionService自动注册
      	支持JSR-303验证框架的自动探测并注册（只需把JSR-303实现放置到classpath）
      	自动注册相应的HttpMessageConverter（用于支持@RequestBody  和 @ResponseBody）
      	（如XML输入输出转换器（只需将JAXP实现放置到classpath）、JSON输入输出转换器（只需将Jackson实现放置到classpath））等。 -->	
	<mvc:annotation-driven />
	
	<!-- <mvc:interceptors>：注册自定义的处理器拦截器  -->
	<mvc:interceptors>
		<bean class="com.jspxcms.core.support.ForeInterceptor"/>
	</mvc:interceptors>	
	
	
	<!-- 配置freeMarker视图解析器   -->
	<bean id="viewResolver" class="com.jspxcms.common.freemarker.FreeMarkerViewResolver">
		<property name="contentType" value="text/html; charset=UTF-8"/>
		<property name="cacheUnresolved" value="false"/>
    <property name="redirectHttp10Compatible" value="false"/>
	</bean>
</beans>