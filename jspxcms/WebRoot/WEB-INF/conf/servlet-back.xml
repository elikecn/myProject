<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	default-lazy-init="true">
		
	<!--（SpringMVC的servlet配置文件）：声明Controller的控制器，指定SpringMVC的视图解析器   -->
	
	
	<!-- <context:annotation-config/>的作用是隐式地向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor -->
    <!-- PersistenceAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。 -->
	<context:annotation-config/>
		
	
	<!-- Spring3.1使用新的HandlerMapping 和 HandlerAdapter来支持@Contoller和@RequestMapping注解处理器。-->
    <!-- 新的@Contoller和@RequestMapping注解支持类：处理器映射RequestMappingHandlerMapping 和 处理器适配器RequestMappingHandlerAdapter组合来 代替Spring2.5开始的处理器映射DefaultAnnotationHandlerMapping和处理器适配器AnnotationMethodHandlerAdapter -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="com.jspxcms.common.web.BindingInitializer" />
		</property>
		<property name="customArgumentResolvers">
			<list>
				<bean class="com.jspxcms.common.web.PageableArgumentResolver" />
			</list>
		</property>
	</bean>
	
	<!-- 使用Spring CommonsMultipartResolver 上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
	
	<mvc:annotation-driven />
	<mvc:interceptors>
		<bean class="com.jspxcms.core.support.BackInterceptor" />
	</mvc:interceptors>
	
	
	
	<!-- 配置视图解析器，SpringMVC为视图名到具体视图的映射提供了许多可供选择，这里使用的是InternalResourceViewResolver，-->
	<!-- 它通过为视图逻辑名添加前后缀的方式进行解析，如视图逻辑名（Controller中方法的返回）为“login”， -->
	<!-- 将解析为/WEB-INF/views/login.jsp -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
    	<property name="redirectHttp10Compatible" value="false"/>
    	<property name="order" value="3"></property>
	</bean>
	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)-
 <bean id="defaultViewResolver"
  class="org.springframework.web.servlet.view.InternalResourceViewResolver"
  p:order="3">
  <property name="viewClass"
   value="org.springframework.web.servlet.view.JstlView" />
  <property name="contentType" value="text/html" />
  <property name="prefix" value="/webpage/" />
  <property name="suffix" value=".jsp" />
 </bean>-->
	 
	
    <!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
    <bean id="beanNameViewResolver"
          class="org.springframework.web.servlet.view.BeanNameViewResolver">
          <property name="order" value="0"></property>
    </bean>
    <!-- Excel 处理 根据用户输入进行对象处理 -->
    <bean id="jeecgExcelView" class="org.jeecgframework.poi.excel.view.JeecgSingleExcelView" />
    <bean id="jeecgTemplateExcelView" class="org.jeecgframework.poi.excel.view.JeecgTemplateExcelView" />
    <bean id="jeecgTemplateWordView" class="org.jeecgframework.poi.excel.view.JeecgTemplateWordView" />
    <bean id="jeecgMapExcelView" class="org.jeecgframework.poi.excel.view.JeecgMapExcelView" />
	
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieName" value="clientlanguage"/>
		in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down)
		<property name="cookieMaxAge" value="100000"/>
	</bean> -->
	
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<!-- <property name="proxyTargetClass" value="true" /> -->
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
	
	<!--
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.AuthorizationException">/errors/403</prop>
				<prop key="javax.validation.ConstraintViolationException">/errors/400</prop>				
				<prop key="org.springframework.dao.DataIntegrityViolationException">/errors/data_integrity_violation_exception</prop>
				<prop key="com.jspxcms.core.support.DeleteException">/errors/delete_exception</prop>
				<prop key="com.jspxcms.core.support.CmsException">/errors/cms_exception</prop>
      </props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="/errors/403">403</prop>
				<prop key="/errors/400">400</prop>
				<prop key="/errors/data_integrity_violation_exception">200</prop>
				<prop key="/errors/cms_exception">200</prop>
			</props>
		</property>
		 <property name="order" value="0"/>
  </bean>
   -->
</beans>