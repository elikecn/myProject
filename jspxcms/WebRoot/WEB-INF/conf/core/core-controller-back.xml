<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	default-lazy-init="true">
	
	<!-- 核心包，core-controller-back.xml后台Controller的spring配置文件 -->

    <!-- Spring在2.5后提供了context的命名空间，它提供了通过扫描类包以应用注解定义Bean的方式； -->
    <!-- component-scan的base-package属性指定一个需要扫描的基类包，Spring容器会扫描这个基类包里的所有类，
           并从类的注解信息中获取Bean的定义信息。
    //<context:component-scan>有一个use-default-filters属性，改属性默认为true,这就意味着会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。
    //<context:include-filter>表示要包含的目标类；而<context:exclude-filter>表示要排除在外的目标类。
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> ,
           这样就会只扫描base-package指定下的有@Controller下的java类，并注册成bean  -->
           
	<context:component-scan base-package="com.jspxcms.core.web.back" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
</beans>